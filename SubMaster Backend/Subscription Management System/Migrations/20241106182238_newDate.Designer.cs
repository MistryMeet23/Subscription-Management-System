// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscription_Management_System.Data;

#nullable disable

namespace Subscription_Management_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241106182238_newDate")]
    partial class newDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Subscription_Management_System.Models.CustomerSubscription", b =>
                {
                    b.Property<int>("Subscription_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Subscription_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount_Applied")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payment_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Plan_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.HasKey("Subscription_Id");

                    b.HasIndex("Plan_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("CustomerSubscriptions");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Feedback", b =>
                {
                    b.Property<int>("Feedback_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Feedback_Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Submitted_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Vendor_Id")
                        .HasColumnType("integer");

                    b.HasKey("Feedback_Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("Vendor_Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Invoice", b =>
                {
                    b.Property<int>("Invoice_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Invoice_Id"));

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Invoice_Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Issue_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Payment_Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total_Amount")
                        .HasColumnType("numeric");

                    b.HasKey("Invoice_Id");

                    b.HasIndex("Payment_Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Notification", b =>
                {
                    b.Property<int>("Notification_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Notification_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Is_Email")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notification_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Sent_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.HasKey("Notification_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Payment", b =>
                {
                    b.Property<int>("Payment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Payment_Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payment_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Plan_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Transaction_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.HasKey("Payment_Id");

                    b.HasIndex("Plan_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Promotion", b =>
                {
                    b.Property<int>("Promotion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Promotion_Id"));

                    b.Property<decimal>("Discount_Percentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Plan_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Promotion_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Usage_Limit")
                        .HasColumnType("integer");

                    b.HasKey("Promotion_Id");

                    b.HasIndex("Plan_Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.SubscriptionHistory", b =>
                {
                    b.Property<int>("History_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("History_Id"));

                    b.Property<string>("Change_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Changed_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("New_Value")
                        .HasColumnType("text");

                    b.Property<string>("Old_Value")
                        .HasColumnType("text");

                    b.Property<int>("Plan_Id")
                        .HasColumnType("integer");

                    b.HasKey("History_Id");

                    b.HasIndex("Plan_Id");

                    b.ToTable("SubscriptionHistories");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Plan_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Plan_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration_In_Days")
                        .HasColumnType("integer");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Plan_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Vendor_Id")
                        .HasColumnType("integer");

                    b.HasKey("Plan_Id");

                    b.HasIndex("Vendor_Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.UserAccount", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("User_Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date_Of_Birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password_Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text");

                    b.Property<string>("Profile_Picture_Url")
                        .HasColumnType("text");

                    b.Property<int>("Role_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("User_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.UserRole", b =>
                {
                    b.Property<int>("Role_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Role_Id"));

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Role_Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.VendorProfile", b =>
                {
                    b.Property<int>("Vendor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Vendor_Id"));

                    b.Property<string>("Business_Address")
                        .HasColumnType("text");

                    b.Property<string>("Business_Description")
                        .HasColumnType("text");

                    b.Property<string>("Business_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo_Url")
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text");

                    b.Property<string>("Social_Media_Links")
                        .HasColumnType("text");

                    b.Property<string>("Tax_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Website_Url")
                        .HasColumnType("text");

                    b.HasKey("Vendor_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("VendorProfiles");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.CustomerSubscription", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("Plan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Management_System.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Feedback", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Management_System.Models.VendorProfile", "VendorProfile")
                        .WithMany()
                        .HasForeignKey("Vendor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("VendorProfile");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Invoice", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("Payment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Notification", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Payment", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("Plan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Management_System.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.Promotion", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("Plan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.SubscriptionHistory", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("Plan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.SubscriptionPlan", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.VendorProfile", "VendorProfile")
                        .WithMany()
                        .HasForeignKey("Vendor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorProfile");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.UserAccount", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Subscription_Management_System.Models.VendorProfile", b =>
                {
                    b.HasOne("Subscription_Management_System.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
